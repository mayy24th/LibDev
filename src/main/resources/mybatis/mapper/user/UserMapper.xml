<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.LibDev.user.mapper.UserMapper">

    <!-- 유저 목록 조회 (총 연체일수 포함) -->
    <select id="findAllUsersWithOverdueDays" resultType="com.example.LibDev.user.dto.UserResDto">
        SELECT
        u.name,
        u.email,
        u.phone,
        u.role,
        u.created_at AS createdAt,
        u.updated_at AS updatedAt,
        u.penalty_expiration AS penaltyExpiration,
        COALESCE(SUM(b.overdue_days), 0) AS totalOverdueDays
        FROM user u
        LEFT JOIN borrow b ON u.id = b.user_id
        AND b.status = 'OVERDUE'  <!-- 연체 상태인 대출 기록만 포함 -->
        WHERE u.withdraw = FALSE
        <if test="role != null and role != 'ALL'">
            AND u.role = #{role}
        </if>
        <if test="email != null and email != ''">
            AND u.email LIKE CONCAT('%', #{email}, '%')
        </if>
        GROUP BY u.id, u.name, u.email, u.phone, u.role, u.created_at, u.updated_at, u.penalty_expiration
        ORDER BY u.id DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 전체 유저 수 조회 -->
    <select id="countAllUsers" resultType="int">
        SELECT COUNT(*) FROM user WHERE withdraw = FALSE
    </select>

    <!-- 검색 적용 후 유저 수 조회-->
    <select id="countAllUsersWithFilter" resultType="int">
        SELECT COUNT(*)
        FROM user
        WHERE
            (#{role} IS NULL OR role = #{role})
          AND (#{email} IS NULL OR email LIKE CONCAT('%', #{email}, '%'))
          AND withdraw = FALSE
    </select>


    <!--서비스 현황 조회-->
    <select id="getUserServiceCount" resultType="com.example.LibDev.user.dto.UserServiceCountResDto">
        SELECT
            COALESCE(SUM(CASE WHEN b.status != 'RETURNED' THEN 1 ELSE 0 END), 0) AS borrowCount,
            COALESCE(SUM(CASE WHEN b.status = 'RETURNED' THEN 1 ELSE 0 END), 0) AS returnCount,
            COALESCE(SUM(CASE WHEN r.status != 'CANCELLED' THEN 1 ELSE 0 END), 0) AS reservationCount,
            COALESCE(COUNT(DISTINCT rv.review_id), 0) AS reviewCount
        FROM user u
                 LEFT JOIN borrow b ON b.user_id = u.id
                 LEFT JOIN reservation r ON r.user_id = u.id
                 LEFT JOIN review rv ON rv.user_id = u.id
        WHERE u.email = #{email}
    </select>

</mapper>
